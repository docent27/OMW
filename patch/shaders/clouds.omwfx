uniform_float quality {
    default = 2.5;
    min = 0.0;
    max = 10.0;
    step = 0.5;
    description = "Quality of clouds";
}

uniform_float scattering_factor {
    default = 1.0;
    min = 0.0;
    max = 5.0;
    step = 0.1;
    description = "Extent of sky scattering (that tints distant objects toward the colour of the sky)";
}

uniform_bool clouds_enabled {
    default = true;
    description = "Enable high-altitude clouds";
}

uniform_float cloud_density {
    default = 0.5;
    min = 0.0;
    max = 5.0;
    step = 0.05;
    description = "Density of clouds";
}

uniform_float cloud_height {
    default = 250000.0;
    min = 2500.0;
    max = 500000.0;
    step = 1000;
    description = "Height of clouds above the water level";
}

uniform_bool mist_enabled {
    default = true;
    description = "Enable low-altitude mist";
}

uniform_float mist_density {
    default = 0.25;
    min = 0.0;
    max = 1.0;
    step = 0.05;
    description = "Density of mist";
}

uniform_float mist_height {
    default = 0.0;
    min = -8000;
    max = 8000;
    step = 250;
    description = "Base height of mist around the water level";
}

uniform_float mist_speed {
    default = 1;
    min = 0.0;
    max = 5.0;
    step = 0.1;
    description = "The speed that mist moves through the world";
}

uniform_float mist_detail {
    default = 0.5;
    min = 0.0;
    max = 1.5;
    step = 0.1;
    description = "Detailing visible in mist. If you experience rippling, turn this down";
}

uniform_bool mist_swirling {
    default = false;
    description = "An additional swirling effect to mist";
}

uniform_bool replace_skybox {
    default = false;
    description = "Override the default skybox";
}

uniform_bool better_sun {
    default = true;
    description = "Enable better sun rendering";
}

uniform_float point_glow_strength {
    default = 0.25;
    min = 0.0;
    max = 1.0;
    step = 0.05;
    description = "Strength of glow around point lights";
}

uniform_bool point_glow_diffusion {
    default = true;
    description = "Whether mist and clouds should influence point glow (may be expensive)";
}

uniform_bool clamp_point_glow {
    default = true;
    description = "Whether point glow is clamped to the radius of the light (may reduce artifacts)";
}

uniform_bool dithering_enabled {
    default = false;
    description = "Whether dithering is enabled, reducing color banding";
}

sampler_2d noise {
    source = "shaders/textures/noise.png";
    mag_filter = linear;
    min_filter = linear;
    wrap_s = repeat;
    wrap_t = repeat;
    source_format = red;
    internal_format = red;
    source_type = unsigned_byte;
}

fragment main {

    omw_In vec2 omw_TexCoord;

    #define HORIZON 100000000.0

    float dist_at(vec2 uv) {
        float depth = omw_GetDepth(uv);
        mat4 inv = omw.invViewMatrix * omw.invProjectionMatrix;
        vec4 clip_space = vec4((uv * 2.0 - 1.0) * vec2(1, 1), 1.0 - depth, 1.0);
        vec4 view_space = inv * clip_space;
        return view_space.z / view_space.w;
    }

    vec3 wpos_at(vec2 uv) {
        float depth = omw_GetDepth(uv);
        #if (OMW_REVERSE_Z == 1)
            float flipped_depth = 1.0 - depth;
        #else
            float flipped_depth = depth * 2.0 - 1.0;
        #endif
        vec4 clip_space = vec4(uv * 2.0 - 1.0, flipped_depth, 1.0);
        if (depth == 1.0) {
            vec4 world_space = omw.invViewMatrix * ((omw.invProjectionMatrix * clip_space) * vec4(1, 1, 1, 0));
            return normalize(world_space.xyz) * HORIZON;
        } else {
            vec4 world_space = omw.invViewMatrix * (omw.invProjectionMatrix * clip_space);
            return world_space.xyz / world_space.w;
        }
    }

    #define M1 204766743
    #define M2 388370683
    #define M3 396128171

/*
    // Replace this function with the one below it if your GPU can't handle bitwise ops
    float hash_one(int q) {
        int n = ((M3 * q) ^ M2) * M1;
        return float(n) * (1.0 / float(0xffffffffU));
        return 1.0;
    }
*/

    float hash_one(int q) {
        return fract(sin(float(q)) * 43758.5453123);
    }

    float noise_2d(vec2 pos) {
        return omw_Texture2D(noise, pos).x;
    }

    float noise_3d(vec3 pos) {
        pos.z *= 15.0;
        int z = int(floor(pos.z));
        vec2 offs0 = vec2(hash_one(z), hash_one(z + 73));
        vec2 offs1 = vec2(hash_one(z + 1), hash_one(z + 1 + 73));
        return mix(
            noise_2d(pos.xy + offs0),
            noise_2d(pos.xy + offs1),
            fract(pos.z)
        );
    }

    vec2 fog_at(vec3 wpos, float dist) {
        wpos.z = max(wpos.z, 0.0);
        if (mist_swirling) {
            wpos.xy += vec2(
                noise_2d(wpos.xy * 0.0005) - 0.5,
                noise_2d(wpos.xy * 0.0005) - 0.5
            ) * 250.0;
        }
        vec3 time = vec3(omw.simulationTime * 0.1, 0, 0);
        float mist = 0.0;
        if (mist_enabled) {
            float mist_nz = mist_density * (0.01
                * ((noise_3d((wpos - time * 2000.0 * mist_speed) / 3000.0) - 0.5) * 0.35 + 0.5) * 0.8
                * (0.5 - abs(noise_3d((wpos + time * 3000.0 * mist_speed) / 2000.0) - 0.5) * 0.35 * mist_detail) * 0.4
            );
            float mist_base = omw.waterHeight + mist_height + (noise_2d(wpos.xy * 0.00001 + time.xy * 0.03) - 0.6) * 8000.0;
            float mist_height = 5000.0;

            mist = max(mist_nz, 0.0) * pow(clamp(1.0 - (wpos.z - mist_base) / mist_height, 0.0, 1.0), 5.0);
        }

        float cloud_base = 0.0;
        float cloud = 0.0;
        float sun_access = 1.0;
        if (clouds_enabled) {
            cloud_base = omw.waterHeight + cloud_height
                + (noise_2d(wpos.xy * 0.0000003 + time.xy * 0.03) - 0.5) * 300000.0
                + (noise_2d(wpos.xy * 0.000001 + time.xy * 0.03) - 0.5) * 100000.0;
            float cloud_nz = max((noise_2d((wpos.xy - time.xy * 100000.0) / 4000000.0) - 0.5) * 5.0 + 0.5, 0.0);
            if (cloud_nz > 0.0) {
                cloud_nz *= (noise_3d((wpos + time * 50000.0) / 800000.0) - 0.5) * 1.0 + 0.5;
                if (cloud_nz > 0.0) {
                    cloud_nz *= (noise_3d((wpos - time * 30000.0) / 100000.0) - 0.5) * 0.25 + 0.5;
                    if (cloud_nz > 0.0) {
                        cloud_nz *= (noise_3d((wpos - time * 30000.0) / 20000.0) - 0.5) * 0.1 + 0.5;
                    }
                }
            }
            cloud = cloud_density * pow(max(0.2 + cloud_nz, 0.0), 3.0) * 0.001 * pow(max(1.0 - abs(wpos.z - cloud_base) / 400000.0, 0.0), 8.0);
            sun_access *= 1.0 - min(cloud * 1500000.0, 1.0) * clamp((cloud_base - wpos.z) * 0.0000035
                + (noise_2d(wpos.xy / 500000.0 - time.xy * 0.2) - 0.5) * 0.1
                + (noise_3d(wpos / 200000.0 - time * 0.2) - 0.5) * 0.1
                , -0.5, 0.9);
        }

        float attenuation = 0.00009 / (1.0 + wpos.z / 300.0);

        return vec2(
            mist + cloud,// + attenuation,
            sun_access
        );
    }



    vec3 weather_tone(int weather) {
        if(omw.weatherID == 1) return vec3(0.8);
        else if(omw.weatherID == 1) return vec3(0.65);
        else if(omw.weatherID == 1) return vec3(0.5);
        else if(omw.weatherID == 1) return vec3(0.5);
        else if(omw.weatherID == 1) return vec3(0.5);
        else if(omw.weatherID == 1) return vec3(1.0, 0.5, 0.25);
        else if(omw.weatherID == 1) return vec3(1.0, 0.5, 0.5);
        else return vec3(1.0);
    }

    
    vec4 apply_fog(vec4 col, vec3 wpos, vec3 dir, float max_dist) {
        float sun_light = pow(max(omw.sunPos.z, 0.0), 0.25);
        float moon_light = max(-omw.sunPos.z + 0.5, 0.0) * 0.3;
        float direct_light = pow(max(dot(dir, normalize(omw.sunPos.xyz)), 0.0), 20.0) * pow(max(omw.sunPos.z, 0.0), 0.2) * 0.3;
vec3 sky_tone = mix(weather_tone(omw.weatherID), weather_tone(omw.nextWeatherID), omw.weatherTransition);

    vec3 sky_color = mix(
        mix(
            vec3(1.2, 0.4, 0.2),
            vec3(0.01, 0.05, 0.1),
            pow(max(-omw.sunPos.z + 0.2, 0), 0.2)
        ),
        vec3(0.8, 0.9, 1.0),
        pow(max(omw.sunPos.z, 0.0), 0.5)
    ) * sky_tone;


        vec3 fog_color = (sun_light + moon_light) * mix(sky_color, sky_tone, max(omw.sunPos.z, 0.3));

    vec3 sun_color = mix(
        vec3(2.0, 0.3, 0) * 3.0,
        vec3(0.6, 0.5, 0.0),
        pow(max(omw.sunPos.z + 0.2, 0.0), 0.1)
    );

        vec3 fog_light = fog_color + direct_light * sun_color;

        float step_factor = 1.0 / mix(0.75, 1.0, quality);

        float dist = max_dist;
        float f = log(dist) / step_factor + 1.0;

        // Initial
        vec2 ifog = fog_at(omw.eyePos.xyz + dir * max_dist, max_dist);
        ifog.x *= pow(abs(dir.z), 2.0);
        col.rgb = mix(fog_light * ifog.y, col.rgb, pow(0.9999, abs(exp(f * step_factor) - max_dist) * ifog.x * 10000.0));

        // Loop
        f = floor(f);
        int i = 0;
        while (int(f) > 1 && i++ < 100) {
            float new_dist = min(exp(float(f) * step_factor), max_dist);

            vec3 spos = omw.eyePos.xyz + dir * new_dist;
            vec2 fog = fog_at(spos, dist);

            col.rgb = mix(fog_light * fog.y, col.rgb, pow(0.9999, abs(dist - new_dist) * fog.x * 10000.0));

            // Rayleigh scattering
            col.rgb = mix(col.rgb, sky_color, (1.0 - 1.0 / (1.0 + abs(dist - new_dist) * 0.000015 * scattering_factor)) * clamp((20000.0 - spos.z) * 0.0001, 0.0, 1.0));

            dist = new_dist;
            f -= float(1);
        }

        return col;
    }

    vec3 sun_light(vec3 dir) {
        const float frac = 0.002;
        vec3 sun_dir = normalize(omw.sunPos.xyz);

    vec3 sun_color = mix(
        vec3(2.0, 0.3, 0) * 3.0,
        vec3(0.6, 0.5, 0.0),
        pow(max(omw.sunPos.z + 0.2, 0.0), 0.1)
    );

        vec3 sun = clamp(pow((dot(dir, sun_dir) - (1.0 - frac)) / frac, 10.0) * 1.0, 0.0, 1.0) * sun_color * 5.0;
        vec3 sun_glare = pow(max(dot(dir, sun_dir), 0.0), 8.0) * sun_color * 0.5;

        return sun + sun_glare;
    }

    float attenuation_strength_real(vec3 rpos) {
        float d2 = rpos.x * rpos.x + rpos.y * rpos.y + rpos.z * rpos.z;
        return 1.0 / (100.0 + d2);
    }

    vec3 apply_point_glow(vec3 wpos, vec3 dir, float max_dist, vec3 color) {
        for (int i = 0; i < omw_GetPointLightCount(); i ++) {
            vec3 light_pos = omw_GetPointLightWorldPos(i);
            // Project light_pos to dir line
            float t = max(dot(light_pos - wpos, dir), 0.0);
            vec3 nearest = wpos + dir * min(t, max_dist);

            vec3 difference = light_pos - nearest;
            float distance_2 = dot(difference, difference);

            float spread = 0.6;
            if (point_glow_diffusion && !omw.isInterior) {
                spread /= 1.0 + fog_at(light_pos, min(t, max_dist)).x * 200.0;
            }

            float strength = pow(attenuation_strength_real(difference), spread)
                * 0.5
                * point_glow_strength
                * max(1.0 - t * 0.0002, 0.0);

            if (clamp_point_glow) {
                strength *= max(0.0, 1.0 - distance_2 / pow(omw_GetPointLightRadius(i), 2.0));
            }

            vec3 light_color = omw_GetPointLightDiffuse(i) * 100.0 * strength;

            color += light_color;
        }
        return color;
    }

    vec3 rand(vec2 n) {
        return fract(sin(vec3(1.0, 3.0, 7.0) * dot(n, vec2(12.9898, 4.1414))) * 43758.5453);
    }

    void main() {
        vec4 col = omw_Texture2D(omw_SamplerLastShader, omw_TexCoord);

        vec3 wpos = wpos_at(omw_TexCoord);
        float max_dist = distance(omw.eyePos.xyz, wpos);
        vec3 dir = (wpos - omw.eyePos.xyz) / max_dist;

vec3 sky_tone = mix(weather_tone(omw.weatherID), weather_tone(omw.nextWeatherID), omw.weatherTransition);

    vec3 sky_color = mix(
        mix(
            vec3(1.2, 0.4, 0.2),
            vec3(0.01, 0.05, 0.1),
            pow(max(-omw.sunPos.z + 0.2, 0), 0.2)
        ),
        vec3(0.8, 0.9, 1.0),
        pow(max(omw.sunPos.z, 0.0), 0.5)
    ) * sky_tone;


        if (max_dist >= HORIZON * 0.9) {
            if (replace_skybox) {
                // Darken the sky above
                col.rgb = sky_color * mix(vec3(0.5, 0.7, 0.9), vec3(1.0), vec3(1.0 - dir.z));
            }
            if (better_sun) {
                col.rgb += sun_light(dir);
            }
        }

        if (!omw.isInterior) {
            col = apply_fog(col, wpos, dir, max_dist);
        }

        if (point_glow_strength > 0.0) {
            col.rgb = apply_point_glow(omw.eyePos.xyz, dir, max_dist, col.rgb);
        }

        if (dithering_enabled) {
            col.rgb += rand(omw_TexCoord * 1000.0) * 2.0 / 255.0;
        }

        omw_FragColor = col;
    }
}

technique {
    passes = main;
    version = "0.1";
    description = "Volumetric Clouds";
    author = "zesterer";
    hdr = true;
    flags = disable_underwater, disable_sunglare;
    pass_lights = true;
}
