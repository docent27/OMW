uniform_bool bluenoise {
    header = "General";
	default = true;
    display_name = "Blue Noise";
	description = "Blue noise dithering";
}

uniform_bool horizonclipping {
    default = true;
    display_name = "Horizon Blending";
    description = "Prevents the sun disc from being drawn below the horizon. Might cause an FPS hit.";
    display_name = "Horizon Clipping";
}

uniform_int N {
    default = 20;
    min = 1;
    max = 50;
    step = 1;
    display_name = "Iterations";
    description = "Number of iterations";
}

uniform_float raysunradius {
    default = 0.25;
    min = 0.1;
    max = 10.0;
    step = 0.1;
    display_name = "Ray Radius";
    description = "Radius around sun center that emits rays";
}

uniform_float raystrength {
    header = "Sun Rays";
    default = 1.7;
    min = 0.1;
    max = 10.0;
    step = 0.1;
    display_name = "Ray Strength";
    description = "Brightness of sun rays";
}

uniform_float rayfalloff {
    default = 1.10;
    min = 0.1;
    max = 10.0;
    step = 0.1;
    display_name = "Ray Falloff";
    description = "Falloff of sun rays";
}

uniform_float rayfalloffconst {
    default = 0.125;
    min = 0.1;
    max = 10.0;
    step = 0.1;
    display_name = "Minimum Ray Length";
    description = "Increase to increase minimum 'length' of sun rays";
}

uniform_float raysunfalloff {
    default = 1.5;
    min = 0.1;
    max = 10.0;
    step = 0.1;
    display_name = "Ray Falloff Exponent";
    description = "Ray strength falloff exponent";
}

uniform_float centervis {
    default = 0.3;
    min = 0.1;
    max = 10.0;
    step = 0.1;
    display_name = "Sun Center Ray Opacity";
    description = "Ray opacity at center of sun";
}

uniform_float sunrayocclude {
    default = 0.75;
    min = 0.1;
    max = 10.0;
    step = 0.1;
    display_name = "Sun Occlude";
    description = "How much sun rays will 'overwrite' original image";
}

uniform_float brightnessadd {
    default = 1.25;
    min = 0.1;
    max = 10.0;
    step = 0.1;
    display_name = "Ray Brightness";
    description = "Additional sun ray color brightness for very bright rays";
}

uniform_float offscreenrange {
    default = 0.5;
    min = 0.1;
    max = 10.0;
    step = 0.1;
    display_name = "Offscreen Ray Distance";
    description = "Maximum offscreen position of sun before rays vanish";
}

uniform_float sundiscradius {
    header = "Sun Disc";
    default = 0.025;
    min = 0.01;
    max = 10.0;
    step = 0.1;
    display_name = "Sun Radius";
    description = "Radius of sun disc";
}

uniform_float sundiscbrightness {
    default = 1.6;
    min = 0.1;
    max = 10.0;
    step = 0.1;
    display_name = "Sun Brightness";
    description = "Brightness of sun disc";
}

uniform_float sundiscdesaturate {
    default = 0.4;
    min = -10.0;
    max = 10.0;
    step = 0.1;
    display_name = "Sun Desaturation";
    description = "Desaturation of sun disc color, negative values for more saturation";
}

uniform_float sundiscocclude {
    default = 0.75;
    min = 0.1;
    max = 10.0;
    step = 0.1;
    display_name = "Sun Occlude";
    description = "How much the sun disc will 'overwrite' original image";
}

sampler_2d Snoise {
    source = "shaders/textures/bluenoise.png";
    mag_filter = nearest;
    min_filter = nearest;
    wrap_s = repeat;
    wrap_t = repeat;
}

shared {
    const float scale = 2.0;
    const float rscale = 0.5;
    const float threshold = 1.0;

    vec2 getSunView()
    {
        vec4 pos = (omw.projectionMatrix * omw.viewMatrix) * omw.sunPos;
        pos.xy /= pos.w;
        pos.xy = pos.xy * 0.5 + 0.5;
        pos.y = 1.0 - pos.y;
        return vec2(pos.xy);
    }
	
    vec3 toWorld(vec2 tex)
    {
        vec3 v = vec3(omw.viewMatrix[0][2], omw.viewMatrix[1][2], omw.viewMatrix[2][2]);
        v += vec3(1.0/omw.projectionMatrix[0][0] * (2.0*(1.0 - tex.x)-1.0)) * vec3(omw.viewMatrix[0][0], omw.viewMatrix[1][0], omw.viewMatrix[2][0]);
        v += vec3(-1.0/omw.projectionMatrix[1][1] * (2.0*tex.y-1.0)) * vec3(omw.viewMatrix[0][1], omw.viewMatrix[1][1], omw.viewMatrix[2][1]);
        v.z *= -1.0;
        return v;
    }
	
    vec2 scale_uv(vec2 uv, vec2 scale, vec2 center) {
		return (uv - center) * scale + center;
	}
}

fragment stretch {
    omw_In vec2 omw_TexCoord;

    void main()
    {

        vec2 Tex = omw_TexCoord;
        Tex.y = 1.0 - Tex.y;
        vec2 cutoff = 1.1 * rscale - Tex;
        if(cutoff.y < 0.0 || cutoff.x < 0.0)
            discard;

        vec3 sundir = -normalize(omw.sunPos.xyz);
        float forward = dot(sundir, omw.eyeVec.xyz);

        float depth = 0.0;

        if(forward < 0.0)
        {
            vec2 srcTex = scale * Tex;
            srcTex.y = 1.0 - srcTex.y;
            depth = step(threshold, omw_GetDepth(srcTex));
            depth += step(threshold, omw_GetDepth(srcTex + vec2(omw.rcpResolution.x, 0.0)));
            depth += step(threshold, omw_GetDepth(srcTex + vec2(0.0, omw.rcpResolution.y)));
            depth += step(threshold, omw_GetDepth(srcTex + vec2(omw.rcpResolution.x, omw.rcpResolution.y)));
            depth *= 0.25;
        }

        omw_FragColor = vec4(0, 0, 0, depth);
    }
}

fragment blurRHalf {
    omw_In vec2 omw_TexCoord;

    void main()
    {

        vec2 Tex = omw_TexCoord;
        Tex.y = 1.0 - Tex.y;
        vec2 cutoff = 1.1 * rscale - Tex;
        if(cutoff.y < 0.0 || cutoff.x < 0.0)
            discard;

        vec2 sunviewhalf = 0.5 * getSunView();

        Tex.y = 1.0 - Tex.y;
        vec2 radial = normalize(Tex - sunviewhalf).xy * omw.rcpResolution.yx;

        float alpha = 0.3333 * omw_GetLastPass(Tex).a;
        alpha += 0.2222 * omw_GetLastPass(Tex + radial).a;
        alpha += 0.2222 * omw_GetLastPass(Tex - radial).a;
        alpha += 0.1111 * omw_GetLastPass(Tex + 2.0*radial).a;
        alpha += 0.1111 * omw_GetLastPass(Tex - 2.0*radial).a;

        omw_FragColor = vec4(0.0,0.0,0.0,alpha);
    }
}

fragment rays {
    omw_In vec2 omw_TexCoord;

    void main()
    {
        vec3 sundir = -normalize(omw.sunPos.xyz);
        float forward = dot(sundir, omw.eyeVec.xyz);

        if(forward >= 0.0)
        {
            omw_FragColor = vec4(0.0);
            return;
        }

        vec2 Tex = omw_TexCoord;
        Tex.y = 1.0 - Tex.y;
		
        float raspect = omw.rcpResolution.x / omw.rcpResolution.y;
		    float timer = omw.simulationTime * 0.5;
	    	float offset = 0.0;
		
	    	if(bluenoise) {
			      offset = texture2D(Snoise, 0.8 * Tex * vec2(1.0, raspect)).r;
		      	offset = fract(offset + timer * 0.61803398875);
		    }
		
        vec2 sunview = getSunView();
        float strength = raystrength * 1.0 * smoothstep(-offscreenrange, 0.0, 0.5-abs(sunview.x-0.5)) * smoothstep(-offscreenrange, 0.0, 0.5-abs(sunview.y-0.5));

        vec2 screendir = (Tex - sunview);

        float screendist = length(screendir * vec2(1.0, raspect));
        screendir /= screendist;
		
        float sunr = min(raysunradius, screendist);    
        float l = 0.0;

        for(int i = 1; i <= N; i++)
        {
            float sundist = (float(i) + offset) / float(N) * sunr;

            vec2 coords = clamp(sunview + sundist * screendir, vec2(0.0), vec2(1.0)) * rscale;
            coords.y = 1.0 - coords.y;

            l += omw_GetLastPass(coords).a * exp(-((screendist-sundist)/(rayfalloffconst+sundist)) * rayfalloff) * pow(1.0 - clamp(sundist/raysunradius, 0.0, 1.0), raysunfalloff);
        }

        float oneminuscentervis = 1.0 - centervis;

        l *= strength / float(N)* (screendist/raysunradius * oneminuscentervis + centervis);

        vec4 col = vec4(omw.sunColor.r, 0.8 * omw.sunColor.g, 0.8 * omw.sunColor.b, l);
        col.rgb *= 1.0 + brightnessadd * pow(col.a, 3.0);
        
        omw_FragColor = col;
    }
}

fragment blurT {
    omw_In vec2 omw_TexCoord;

    void main()
    {
        vec3 sundir = -normalize(omw.sunPos.xyz);
        float forward = dot(sundir, omw.eyeVec.xyz);

        if(forward >= 0.0)
        {
            omw_FragColor = vec4(0.0);
            return;
        }

        vec2 Tex = omw_TexCoord;
		    vec2 tanTex = vec2(-1.0 * Tex.x, 1.0-Tex.y);

        vec2 sunview = getSunView();

        vec2 tangent = 1.0 * normalize(tanTex - sunview).yx * vec2(omw.rcpResolution.y, -omw.rcpResolution.x);

        vec4 col = 0.3333 * omw_GetLastPass(Tex);
        col += 0.2222 * omw_GetLastPass(Tex + tangent);
        col += 0.2222 * omw_GetLastPass(Tex - tangent);
        col += 0.1111 * omw_GetLastPass(Tex + 2.0*tangent);
        col += 0.1111 * omw_GetLastPass(Tex - 2.0*tangent);

        omw_FragColor = col;
    }

}

vertex combine {
    #if OMW_USE_BINDINGS
        omw_In vec2 omw_Vertex;
    #endif

    omw_Out vec2 omw_TexCoord;
    omw_Out float light;

    void main()
    {
        omw_Position = vec4(omw_Vertex.xy, 0.0, 1.0);
        omw_TexCoord = omw_Position.xy * 0.5 + 0.5;

        float niceweather = 1.0;
        if (omw.weatherTransition != 0.0 && omw.nextWeatherID >= 0 && omw.nextWeatherID <= 9)
        {
            niceweather = mix((omw.weatherID <= 1) ? 1.0 : 0.0, (omw.nextWeatherID <= 1) ? 1.0 : 0.0, 1.0 - omw.weatherTransition);
            niceweather *= niceweather;
        }
        else
            niceweather = (omw.weatherID <= 1) ? 1.0 : 0.0;

        float sunvis = mix(omw.sunVis, 1.0, 0.333 * niceweather);
        light = 1.0 - pow(1.0 - sunvis, 2.0);
    }
}

fragment combine {
    omw_In vec2 omw_TexCoord;
    omw_In float light;

    void main()
    {
        vec4 ray = omw_GetLastPass(omw_TexCoord);
        vec4 col = omw_GetLastShader(omw_TexCoord);

        col *= clamp(1.0 - sunrayocclude * ray.a, 0.0, 1.0);
        col.rgb = clamp(col.rgb + ray.rgb * ray.a, 0.0, 1.0);

        vec3 sundir = -normalize(omw.sunPos.xyz);
        float forward = dot(sundir, omw.eyeVec.xyz);
        float raspect = omw.rcpResolution.x / omw.rcpResolution.y;

        if (forward < 0.0)
        {
            vec2 Tex = omw_TexCoord;
            Tex.y = 1.0 - Tex.y;

            vec2 screendir = Tex - getSunView();
            screendir.y *= raspect;

            float sharpness = mix(60.0, 660.0 + 360.0 * sundir.z, clamp(omw.fogNear / 480.0, 0.0, 1.0));

            float occl = light * step(threshold, omw_GetDepth(omw_TexCoord));
            occl *= clamp(exp2(sharpness * (sundiscradius - length(screendir))), 0.0, 1.0);
        
            if(occl > 0.004)
            {
                vec3 suncoldisc = vec3(1, 0.76+0.24*omw.sunPos.z, 0.54+0.46*omw.sunPos.z) 
                                        * clamp(omw.sunColor.rgb/max(omw.sunColor.r,max(omw.sunColor.g, omw.sunColor.b))
                                         * (1.0 - sundiscdesaturate) + vec3(sundiscdesaturate), 0.0, 1.0);
                vec3 scol = suncoldisc * sundiscbrightness;
                if (horizonclipping)
                {
                    float aziHorizon = normalize(vec2(4.0 * omw.fogFar, -omw.eyePos.z)).y;
                    float azi = normalize(toWorld(omw_TexCoord)).z;
                    occl *= smoothstep(-0.005, 0.010, azi - aziHorizon);
                    scol.gb *= smoothstep(-0.04, 0.09, azi - aziHorizon);
                }
                col.rgb = mix(col.rgb, scol, sundiscocclude * occl);
            }
        }
				
        omw_FragColor = col;
    }

}

technique {
    passes = stretch, blurRHalf, rays, blurT, combine;
    description = "Screen Space God rays";
    author = "Phal, Hrnchamd, Dexter, Wazabear";
    version = "1.2";
    flags = Disable_Interiors, Disable_SunGlare, Disable_Underwater;
}
